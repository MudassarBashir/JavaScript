Notes taken during course.

1. Getting Started

JavaScript is the world's most widely used programming language and was invented by Brendan Eich.

The modern web works based on client server communication. Usually, a web browser sends an http request to a web server and the web server returns an http response. The response is html that is generated by the server and is for the browser to render. The server's response may be a simple static page or it could be the result of running a more complex server side program written in a language such as PHP,.NET, Python, Ruby, or even a framework such as Grails. JavaScript itself can actually even run server side through frameworks such as Node.js.

JavaScript(JS) isn't just used in browsers anymore. Indeed JS runs inside Windows 8 as well as Mac OS X. Another application program usage of JS outside a browser is the popular NoSQL database MongoDB. Open office also provides JavaScript support.

JS is prototypal rather than class based.

2005: A popular JS technique called AJAX arose from Microsoft's IE.

One of the tools needed in this course will be a web server because without it we cannot test AJAX. Some options are Apache http server or XAMPP from apachefriends.org. All these servers allow you to open your files as if they were on the internet(as opposed to being in the local file system). This is what allows us to 'simulate' AJAX testing by going to URLs such as:
localhost/test/myfile.html.

2. Browser scripting basics

A JS script can be placed anywhere in the <head> or the <body> section of a webpage whether importing the scrip from an external file or putting it inline. It is usually best practice to put scripts at the end of the web page just before the closing </body> tag so that they don't 'hold' up the rest of the page from rendering first. This also gives the user the impression of web pages loading 'faster.'

A good approach to follow right from the start is called progressive enhancement. The idea is that you make the website first work with plain HTML, and then add CSS and JS features if the browser supports them.

When NOT to use JavaScript:
When any other technology could be used instead. For example, CSS has built features for animations and transformations, and using CSS for this purpose would make the code run a lot faster than forcing this to happen using JS. Also, with HTML 5, form fields have built in validation controls so don't use JS for this purpose. Also, client-side validation is NOT a substitute for server side validation. Good code also validates incoming form parameters at the back end.

3. Javascript essentials
Avoid using document.write unless there is absolutely no alternative. It is slower running and often not the best choice.

Functions
All JS functions can return only one value. If you don't specify one, the function will simply return undefined.

---------------------------------------------